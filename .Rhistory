# xlab <- expression(paste("ABG CO"[2], " (mmHg)"))
#
# plt <- function(dat, title) {
#   ggplot(dat, aes(paco2, yhat)) +
#     geom_line() +
#     geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
#     labs(title = title, x = xlab, y = "Predicted probability") +
#     theme_minimal()
# }
#
# plot_imv_abg  <- plt(pred_imv_abg,   "IMV")
# plot_niv_abg  <- plt(pred_niv_abg,   "NIV")
# plot_death_abg<- plt(pred_death_abg, "Death")
# plot_hcrf_abg <- plt(pred_hcrf_abg,  "Hypercapnic RF")
#
# ((plot_imv_abg | plot_niv_abg) /
# (plot_death_abg | plot_hcrf_abg)) +
#   plot_annotation(
#     title = expression(
#       paste("Propensity‑weighted predicted probability by ABG CO"[2],
#             " (restricted cubic spline)")
#     )
# )
# set.seed(42)  # reproducible GBM fit
#
# # ── 1. inverse‑probability weights for receiving an ABG ───────────────────────
#
# # done in the last block, so not needed
#
# ── 2. analysis sample: rows with a measured PaCO₂ ────────────────────────────
subset_data_abg <- subset_data %>%
filter(!is.na(paco2)) %>%                    # implies has_abg == 1
select(paco2, imv_proc, niv_proc, died,
hypercap_resp_failure, w_abg) %>%
filter(complete.cases(.))
# ── 3. weighted logistic spline models with robust SEs ───────────────────────
dd <- datadist(subset_data_abg); options(datadist = "dd")
fitfun <- function(formula)
svyglm(
formula,
design = svydesign(ids = ~1, weights = ~w_abg, data = subset_data_abg),
family = quasibinomial()
)
fit_imv   <- fitfun(imv_proc              ~ rcs(paco2, 4))
fit_niv   <- fitfun(niv_proc              ~ rcs(paco2, 4))
fit_death <- fitfun(died                  ~ rcs(paco2, 4))
fit_hcrf  <- fitfun(hypercap_resp_failure ~ rcs(paco2, 4))
# ── 4. prediction helper ─────────────────────────────────────────────────────
mkpred <- function(fit, data_ref) {
# 1. Grid of PaCO₂ values
newd <- data.frame(
paco2 = seq(min(data_ref$paco2, na.rm = TRUE),
max(data_ref$paco2, na.rm = TRUE),
length.out = 200)
)
# 2. Design (model) matrix for the new data
mm <- model.matrix(delete.response(terms(fit)),  # drop outcome
data = newd)
# 3. Linear predictor and its standard error
eta  <- mm %*% coef(fit)                        # β'x
vcov <- vcov(fit)                               # robust VCOV from svyglm
se   <- sqrt(rowSums((mm %*% vcov) * mm))       # √diag(X Σ Xᵀ)
# 4. Transform to probability scale
transform(
newd,
yhat  = plogis(eta),
lower = plogis(eta - 1.96 * se),
upper = plogis(eta + 1.96 * se)
)
}
pred_imv   <- mkpred(fit_imv,   subset_data_abg)
pred_niv   <- mkpred(fit_niv,   subset_data_abg)
pred_death <- mkpred(fit_death, subset_data_abg)
pred_hcrf  <- mkpred(fit_hcrf,  subset_data_abg)
# ── 5. plotting ──────────────────────────────────────────────────────────────
xlab <- expression(paste("ABG CO"[2], " (mmHg)"))
plt <- function(dat, title)
ggplot(dat, aes(paco2, yhat)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(title = title, x = xlab, y = "Predicted probability") +
theme_minimal()
(patchwork::wrap_plots(
plt(pred_imv,   "IMV"),
plt(pred_niv,   "NIV"),
plt(pred_death, "Death"),
plt(pred_hcrf,  "Hypercapnic RF"),
ncol = 2
)
) +
plot_annotation(
title = expression(
paste("Propensity‑weighted predicted probability by ABG CO"[2],
" (restricted cubic spline)")
)
)
#
# w_out <- weightit(has_vbg ~ age_at_encounter + sex + factor(race_ethnicity) + curr_bmi + copd + asthma + osa + chf + acute_nmd + phtn + factor(location),
#                          data = subset_data,
#                          method = "gbm",
#                          estimand = "ATE")
#
# subset_data$ipw <- w_out$weights        # align weights to rows
#
# subset_data_vbg <- subset_data %>%
#   select(vbg_co2, imv_proc, niv_proc, died,
#          hypercap_resp_failure, ipw) %>%
#   filter(!is.na(vbg_co2) & complete.cases(.))
#
# dd <- datadist(subset_data_vbg); options(datadist = "dd")
#
# fit_imv_vbg   <- lrm(imv_proc             ~ rcs(vbg_co2, 4),
#                      data = subset_data_vbg, weights = ipw)
#
# fit_niv_vbg   <- lrm(niv_proc             ~ rcs(vbg_co2, 4),
#                      data = subset_data_vbg, weights = ipw)
#
# fit_death_vbg <- lrm(died                 ~ rcs(vbg_co2, 4),
#                      data = subset_data_vbg, weights = ipw)
#
# fit_hcrf_vbg  <- lrm(hypercap_resp_failure ~ rcs(vbg_co2, 4),
#                      data = subset_data_vbg, weights = ipw)
#
# pred_imv_vbg   <- as.data.frame(Predict(fit_imv_vbg,   vbg_co2, fun = plogis))
# pred_niv_vbg   <- as.data.frame(Predict(fit_niv_vbg,   vbg_co2, fun = plogis))
# pred_death_vbg <- as.data.frame(Predict(fit_death_vbg, vbg_co2, fun = plogis))
# pred_hcrf_vbg  <- as.data.frame(Predict(fit_hcrf_vbg,  vbg_co2, fun = plogis))
#
# xlab <- expression(paste("VBG CO"[2], " (mmHg)"))
#
# plt <- function(dat, title) {
#   ggplot(dat, aes(vbg_co2, yhat)) +
#     geom_line() +
#     geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
#     labs(title = title, x = xlab, y = "Predicted probability") +
#     theme_minimal()
# }
#
# plot_imv_vbg  <- plt(pred_imv_vbg,   "IMV")
# plot_niv_vbg  <- plt(pred_niv_vbg,   "NIV")
# plot_death_vbg<- plt(pred_death_vbg, "Death")
# plot_hcrf_vbg <- plt(pred_hcrf_vbg,  "Hypercapnic RF")
#
# ((plot_imv_vbg | plot_niv_vbg) /
# (plot_death_vbg | plot_hcrf_vbg)) +
#   plot_annotation(
#     title = expression(
#       paste("Propensity‑weighted predicted probability by VBG CO"[2],
#             " (restricted cubic spline)")
#     )
# )
# ──────────────────────────────────────────────────────────────────────────────
#  Inverse‑propensity weighting & outcome modelling for **VBG** cohort
#    – mirrored 1‑to‑1 to the validated ABG workflow
# ──────────────────────────────────────────────────────────────────────────────
set.seed(42)   # identical seed for direct comparability
# 1. Inverse‑probability weights for receiving a VBG ---------------------------
w_vbg <- weightit(
has_vbg ~ age_at_encounter + sex + factor(race_ethnicity) + curr_bmi +
copd + asthma + osa + chf + acute_nmd + phtn + factor(location),
data        = subset_data,
method      = "gbm",
estimand    = "ATE",
missing.    = "ind",
n.trees     = 3000,
interaction.depth = 3,
shrinkage   = 0.01,
bag.fraction= 0.6,
cv.folds    = 5,
stop.method = "es.mean",
n.cores     = parallel::detectCores()
)
# ── 2. Winsorise / stabilise weights (two‑sided) ─────────────────────────────
w <- w_vbg$weights            # original GBM weights
w <- w / mean(w)                     # stabilise
cut <- quantile(w, c(0.01, 0.99), na.rm = TRUE)
w   <- pmin(pmax(w, cut[1]), cut[2]) # two‑tail Winsorisation
w <- w / mean(w)                     # re‑stabilise so E[w]=1
# overwrite inside the object and attach to data
w_vbg$weights <- w
subset_data$w_vbg    <- w
# w_vbg <- weightit(
#   has_vbg ~ age_at_encounter + sex + factor(race_ethnicity) + curr_bmi +
#             copd + asthma + osa + chf + acute_nmd + phtn + factor(location),
#   data        = subset_data,
#   method      = "gbm",
#   estimand    = "ATE",
#   missing.    = "ind",
#   n.trees     = 5000,
#   shrinkage   = 0.005,
#   stop.method = "es.mean"
# )
bal.tab(w_vbg, un = TRUE, m.threshold = 0.1)      # inspect balance
# 2. Analysis sample: rows with measured VBG CO₂ --------------------------------
subset_data_vbg <- subset_data %>%
filter(!is.na(vbg_co2)) %>%                     # implies has_vbg == 1
select(vbg_co2, imv_proc, niv_proc, died,
hypercap_resp_failure, w_vbg) %>%
filter(complete.cases(.))
# 3. Weighted logistic spline models with robust SEs ---------------------------
dd <- datadist(subset_data_vbg); options(datadist = "dd")
fitfun <- function(formula)
svyglm(
formula,
design = svydesign(ids = ~1, weights = ~w_vbg, data = subset_data_vbg),
family = quasibinomial()
)
fit_imv_vbg   <- fitfun(imv_proc              ~ rcs(vbg_co2, 4))
fit_niv_vbg   <- fitfun(niv_proc              ~ rcs(vbg_co2, 4))
fit_death_vbg <- fitfun(died                  ~ rcs(vbg_co2, 4))
fit_hcrf_vbg  <- fitfun(hypercap_resp_failure ~ rcs(vbg_co2, 4))
# 4. Prediction helper (robust to predict() quirks) ----------------------------
mkpred <- function(fit, data_ref) {
newd <- data.frame(
vbg_co2 = seq(min(data_ref$vbg_co2, na.rm = TRUE),
max(data_ref$vbg_co2, na.rm = TRUE),
length.out = 200)
)
mm   <- model.matrix(delete.response(terms(fit)), newd)
eta  <- mm %*% coef(fit)
vcov <- vcov(fit)
se   <- sqrt(rowSums((mm %*% vcov) * mm))
transform(
newd,
yhat  = plogis(eta),
lower = plogis(eta - 1.96 * se),
upper = plogis(eta + 1.96 * se)
)
}
pred_imv_vbg   <- mkpred(fit_imv_vbg,   subset_data_vbg)
pred_niv_vbg   <- mkpred(fit_niv_vbg,   subset_data_vbg)
pred_death_vbg <- mkpred(fit_death_vbg, subset_data_vbg)
pred_hcrf_vbg  <- mkpred(fit_hcrf_vbg,  subset_data_vbg)
# 5. Plotting -------------------------------------------------------------------
xlab <- expression(paste("VBG CO"[2], " (mmHg)"))
plt <- function(dat, title)
ggplot(dat, aes(vbg_co2, yhat)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(title = title, x = xlab, y = "Predicted probability") +
theme_minimal()
(patchwork::wrap_plots(
plt(pred_imv_vbg,   "IMV"),
plt(pred_niv_vbg,   "NIV"),
plt(pred_death_vbg, "Death"),
plt(pred_hcrf_vbg,  "Hypercapnic RF"),
ncol = 2
)
) +
plot_annotation(
title = expression(
paste("Propensity‑weighted predicted probability by VBG CO"[2],
" (restricted cubic spline)")
)
)
#
# w_out <- weightit(has_vbg ~ age_at_encounter + sex + factor(race_ethnicity) + curr_bmi + copd + asthma + osa + chf + acute_nmd + phtn + factor(location),
#                          data = subset_data,
#                          method = "gbm",
#                          estimand = "ATE")
#
# subset_data$ipw <- w_out$weights        # align weights to rows
#
# subset_data_calc_abg <- subset_data %>%
#   select(calc_abg, imv_proc, niv_proc, died,
#          hypercap_resp_failure, ipw) %>%
#   filter(!is.na(calc_abg) & complete.cases(.))
#
# dd <- datadist(subset_data_calc_abg); options(datadist = "dd")
#
# fit_imv_calc_abg   <- lrm(imv_proc             ~ rcs(calc_abg, 4),
#                      data = subset_data_calc_abg, weights = ipw)
#
# fit_niv_calc_abg   <- lrm(niv_proc             ~ rcs(calc_abg, 4),
#                      data = subset_data_calc_abg, weights = ipw)
#
# fit_death_calc_abg <- lrm(died                 ~ rcs(calc_abg, 4),
#                      data = subset_data_calc_abg, weights = ipw)
#
# fit_hcrf_calc_abg  <- lrm(hypercap_resp_failure ~ rcs(calc_abg, 4),
#                      data = subset_data_calc_abg, weights = ipw)
#
# pred_imv_calc_abg   <- as.data.frame(Predict(fit_imv_calc_abg,   calc_abg, fun = plogis))
# pred_niv_calc_abg   <- as.data.frame(Predict(fit_niv_calc_abg,   calc_abg, fun = plogis))
# pred_death_calc_abg <- as.data.frame(Predict(fit_death_calc_abg, calc_abg, fun = plogis))
# pred_hcrf_calc_abg  <- as.data.frame(Predict(fit_hcrf_calc_abg,  calc_abg, fun = plogis))
#
# xlab <- expression(paste("Calc ABG CO"[2], " (mmHg)"))
#
# plt <- function(dat, title) {
#   ggplot(dat, aes(calc_abg, yhat)) +
#     geom_line() +
#     geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
#     labs(title = title, x = xlab, y = "Predicted probability") +
#     theme_minimal()
# }
#
# plot_imv_calc_abg  <- plt(pred_imv_calc_abg,   "IMV")
# plot_niv_calc_abg  <- plt(pred_niv_calc_abg,   "NIV")
# plot_death_calc_abg <- plt(pred_death_calc_abg, "Death")
# plot_hcrf_calc_abg <- plt(pred_hcrf_calc_abg,  "Hypercapnic RF")
#
# ((plot_imv_calc_abg | plot_niv_calc_abg) /
# (plot_death_calc_abg | plot_hcrf_calc_abg)) +
#   plot_annotation(
#     title = expression(
#       paste("Propensity‑weighted predicted probability by Calc ABG CO"[2],
#             " (restricted cubic spline)")
#     )
# )
# ──────────────────────────────────────────────────────────────────────────────
#  Propensity‑weighted spline models for **Calculated ABG CO₂**
#    (weights still derive from propensity to receive a VBG)
# ──────────────────────────────────────────────────────────────────────────────
# ── 1. define the new treatment variable --------------------------------------
subset_data <- subset_data %>%
mutate(
has_vbg_co2_o2_sat = if_else(
!is.na(vbg_co2)  & vbg_co2  != 0 &
!is.na(vbg_o2sat) & vbg_o2sat != 0,
1, 0
)
)
# quick sanity check
# table(subset_data$has_vbg_co2_o2_sat, useNA = "ifany")
# ── 2. fit the GBM propensity model -------------------------------------------
set.seed(42)
w_vbg_calc <- weightit(
has_vbg_co2_o2_sat ~ age_at_encounter + sex + factor(race_ethnicity) +
curr_bmi + copd + asthma + osa + chf +
acute_nmd + phtn + factor(location),
data        = subset_data,
method      = "gbm",
estimand    = "ATE",
missing.    = "ind",
n.trees     = 3000,
interaction.depth = 3,
shrinkage   = 0.01,
bag.fraction= 0.6,
cv.folds    = 5,
stop.method = "es.mean",
n.cores     = detectCores()
)
# ── 3. (optional) stabilise + two‑sided Winsorisation --------------------------
w <- w_vbg_calc$weights
w <- w / mean(w)
cut <- quantile(w, c(0.01, 0.99), na.rm = TRUE)
w   <- pmin(pmax(w, cut[1]), cut[2])
w   <- w / mean(w)
subset_data$w_vbg_calc <- w          # attach to data frame
w_vbg_calc$weights     <- w          # overwrite inside object for diagnostics
#
#
# w_vbg_calc <- weightit(
#   has_vbg ~ age_at_encounter + sex + factor(race_ethnicity) + curr_bmi +
#             copd + asthma + osa + chf + acute_nmd + phtn + factor(location),
#   data        = subset_data,
#   method      = "gbm",
#   estimand    = "ATE",
#   missing.    = "ind",
#   n.trees     = 5000,
#   shrinkage   = 0.005,
#   stop.method = "es.mean"
# )
bal.tab(w_vbg_calc, un = TRUE, m.threshold = 0.1)   # inspect balance
# 2. Analysis sample: rows with a calculated ABG CO₂ ---------------------------
subset_data_calc <- subset_data %>%
filter(!is.na(calc_abg)) %>%                       # implies has_vbg == 1
select(calc_abg, imv_proc, niv_proc, died,
hypercap_resp_failure, w_vbg_calc) %>%
filter(complete.cases(.))
# 3. Weighted logistic spline models with robust SEs ---------------------------
dd <- datadist(subset_data_calc); options(datadist = "dd")
fitfun <- function(formula)
svyglm(
formula,
design = svydesign(ids = ~1, weights = ~w_vbg_calc, data = subset_data_calc),
family = quasibinomial()
)
fit_imv_calc   <- fitfun(imv_proc              ~ rcs(calc_abg, 4))
fit_niv_calc   <- fitfun(niv_proc              ~ rcs(calc_abg, 4))
fit_death_calc <- fitfun(died                  ~ rcs(calc_abg, 4))
fit_hcrf_calc  <- fitfun(hypercap_resp_failure ~ rcs(calc_abg, 4))
# 4. Prediction helper ---------------------------------------------------------
mkpred <- function(fit, data_ref) {
newd <- data.frame(
calc_abg = seq(min(data_ref$calc_abg, na.rm = TRUE),
max(data_ref$calc_abg, na.rm = TRUE),
length.out = 200)
)
mm   <- model.matrix(delete.response(terms(fit)), newd)
eta  <- mm %*% coef(fit)
vcov <- vcov(fit)
se   <- sqrt(rowSums((mm %*% vcov) * mm))
transform(
newd,
yhat  = plogis(eta),
lower = plogis(eta - 1.96 * se),
upper = plogis(eta + 1.96 * se)
)
}
pred_imv_calc   <- mkpred(fit_imv_calc,   subset_data_calc)
pred_niv_calc   <- mkpred(fit_niv_calc,   subset_data_calc)
pred_death_calc <- mkpred(fit_death_calc, subset_data_calc)
pred_hcrf_calc  <- mkpred(fit_hcrf_calc,  subset_data_calc)
# 5. Plotting -------------------------------------------------------------------
xlab <- expression(paste("Calculated ABG CO"[2], " (mmHg)"))
plt <- function(dat, title)
ggplot(dat, aes(calc_abg, yhat)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(title = title, x = xlab, y = "Predicted probability") +
theme_minimal()
(patchwork::wrap_plots(
plt(pred_imv_calc,   "IMV"),
plt(pred_niv_calc,   "NIV"),
plt(pred_death_calc, "Death"),
plt(pred_hcrf_calc,  "Hypercapnic RF"),
ncol = 2
)
) +
plot_annotation(
title = expression(
paste("Propensity‑weighted predicted probability by Calculated ABG CO"[2],
" (restricted cubic spline)")
)
)
# ──────────────────────────────────────────────────────────────────────────────
#  IP‑weighted odds‑ratio plot (ABG, VBG, Calculated‑ABG)
#    – exact analogue of the un‑weighted figure
# ──────────────────────────────────────────────────────────────────────────────
# weights already attached earlier:
#   • w_abg         – propensity for *ABG*   (column in subset_data)
#   • w_vbg         – propensity for *VBG*   (column in subset_data)
#   • w_vbg_calc    – same weights, used for calculated ABG CO₂
# 1. helper to fit an IP‑weighted GLM and return tidy OR -----------------------
tidy_ipw <- function(data, outcome, exposure, weight_var,
group_label, outcome_label) {
des <- svydesign(ids = ~1, weights = as.formula(paste0("~", weight_var)),
data = data)
mod <- svyglm(
as.formula(paste0(outcome, " ~ ", exposure)),
design = des,
family = quasibinomial()
)
tidy(mod, exponentiate = TRUE, conf.int = TRUE) %>%
filter(term == exposure) %>%                # keep the exposure row
mutate(group = group_label, outcome = outcome_label)
}
# 2. cohort‑specific data frames ----------------------------------------------
abg_df   <- subset_data %>% filter(has_abg == 1)
vbg_df   <- subset_data %>% filter(has_vbg == 1)
calc_df  <- subset_data %>% filter(!is.na(calc_abg))   # implies VBG present
# 3. fit models & collect estimates -------------------------------------------
ipw_estimates <- bind_rows(
# ABG
tidy_ipw(abg_df,  "imv_proc",              "hypercap_on_abg", "w_abg",      "ABG",           "Intubation"),
tidy_ipw(abg_df,  "niv_proc",              "hypercap_on_abg", "w_abg",      "ABG",           "NIV"),
tidy_ipw(abg_df,  "died",                  "hypercap_on_abg", "w_abg",      "ABG",           "Death"),
tidy_ipw(abg_df,  "hypercap_resp_failure", "hypercap_on_abg", "w_abg",      "ABG",           "ICD Code"),
# VBG
tidy_ipw(vbg_df,  "imv_proc",              "hypercap_on_vbg", "w_vbg",      "VBG",           "Intubation"),
tidy_ipw(vbg_df,  "niv_proc",              "hypercap_on_vbg", "w_vbg",      "VBG",           "NIV"),
tidy_ipw(vbg_df,  "died",                  "hypercap_on_vbg", "w_vbg",      "VBG",           "Death"),
tidy_ipw(vbg_df,  "hypercap_resp_failure", "hypercap_on_vbg", "w_vbg",      "VBG",           "ICD Code"),
# Calculated ABG
tidy_ipw(calc_df, "imv_proc",              "hypercapnia_calc","w_vbg_calc", "Calculated ABG","Intubation"),
tidy_ipw(calc_df, "niv_proc",              "hypercapnia_calc","w_vbg_calc", "Calculated ABG","NIV"),
tidy_ipw(calc_df, "died",                  "hypercapnia_calc","w_vbg_calc", "Calculated ABG","Death"),
tidy_ipw(calc_df, "hypercap_resp_failure", "hypercapnia_calc","w_vbg_calc", "Calculated ABG","ICD Code")
)
# 4. plotting ------------------------------------------------------------------
ipw_estimates$group <- factor(
ipw_estimates$group,
levels = c("ABG", "VBG", "Calculated ABG")
)
ggplot(
ipw_estimates,
aes(
x     = outcome,
y     = estimate,
ymin  = conf.low,
ymax  = conf.high,
color = group
)
) +
geom_pointrange(position = position_dodge(width = 0.6), size = 0.6) +
geom_hline(yintercept = 1, linetype = "dashed", colour = "grey40") +
scale_y_log10(
breaks = c(0.25, 0.5, 1, 2, 4, 8, 16),
limits = c(0.25, 16),
labels = number_format(accuracy = 0.01)
) +
coord_flip() +
labs(
title  = "IP‑Weighted Odds Ratio of Outcomes When Hypercapnia Present",
x      = "Outcome",
y      = "Odds Ratio (log scale, 95 % CI)",
color  = "Blood‑gas type",
caption = paste(
"Inverse‑probability weights adjust for covariates associated with receiving each blood‑gas.",
"Models are fitted within their respective cohorts:",
"ABG (weights = w_abg), VBG (w_vbg), Calculated ABG (w_vbg_calc).",
"Numerator = hypercapnic; denominator = normocapnic within cohort.",
sep = "\n"
)
) +
theme_minimal(base_size = 10) +
theme(plot.caption = element_text(hjust = 0))
