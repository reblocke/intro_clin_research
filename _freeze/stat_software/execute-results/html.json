{
  "hash": "27020b446e7e13591f0c31a9d8fbb40d",
  "result": {
    "engine": "knitr",
    "markdown": "# Statistical Software {#sec-stat_software}\n\n\n\nIn the past, researchers had to manually code their own statistical analyses, which was tedious and error-prone. Today, statistical software simplifies this process dramatically. Researchers shift their focus from the technical complexities of computation to understanding statistical logic and applying analyses correctly.\n\nThis section offers guidance on selecting appropriate statistical programming language, walks through the set-up process, and introduces the basics of conducting statistical analyses using modern tools.\n\n## Statistical software options: {#sec-options}\n\nR, Python, and Stata are the 3 most commonly used languages. There are a few other options (SPSS, SAS, Julia, etc.), but they aren't covered here.\n\n|  |  |  |  |\n|-----------------|-----------------|-----------------|--------------------|\n|  | **R** | **Python** | **Stata** |\n| **Cost** | Free | Free | Requires License |\n| **IDE** | RStudio/Posit | Many, Visual Code is good | Built in editor |\n| **Strengths** | Best libraries for epidemiology, trial statistics. | Best libraries for text processing, machine learning, AI integration | Simple syntax; powerful quasi-experimental/meta-analysis packages. Used by U of U MSCI. |\n| **Weakness** | Clunky syntax; many 'dialects' | Overkill for many, complex development environment | Clunkiest machine learning, explainable programing, cost. |\n| <a class='glossary'>Explainable programming<span class='def'>Writing analytic code in a clear, structured, and understandable way so that readers (including reviewers, collaborators, and future researchers) can easily follow and replicate the steps of your analysis. In quantitative disciplines such as mathematics and computer science, providing such code is already standard practice. Medicine is beginning to adopt this approach, recognizing its importance for transparency and reproducibility.</span></a> | Quarto | Jupyter, Quarto | Not native (though can use Jupyter) |\n\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Explainable programming </td>\n   <td style=\"text-align:left;\"> Writing analytic code in a clear, structured, and understandable way so that readers (including reviewers, collaborators, and future researchers) can easily follow and replicate the steps of your analysis. In quantitative disciplines such as mathematics and computer science, providing such code is already standard practice. Medicine is beginning to adopt this approach, recognizing its importance for transparency and reproducibility. </td>\n  </tr>\n</tbody>\n</table>\n\n\n\n## How to install {#sec-install}\n\nChoose the tab for the language(s) you plan to use:\n\n::: panel-tabset\n## R\n\n|  |  |  |  |\n|----------------|----------------|----------------|------------------------|\n| 1: | Install R Language | <https://cran.r-project.org/> | This installs the base programming language |\n| 2: | Install RStudio | <https://posit.co/downloads/> | RStudio is an <a class='glossary'>IDE<span class='def'>Integrated Development Environment, a program that allows for writing, running, and debugging code within a single program.</span></a> (integrated development environment) that allows you to write, execute, and debug code from within a single program. |\n| 3: | Install Quarto (formerly Markdown) | <https://quarto.org/docs/get-started/> | Facilitates sharing and explaining your code. |\n\n## Python\n\n<table style=\"width:95%;\">\n<colgroup>\n<col style=\"width: 4%\" />\n<col style=\"width: 25%\" />\n<col style=\"width: 32%\" />\n<col style=\"width: 31%\" />\n</colgroup>\n<tbody>\n<tr>\n<td><p>1: </p></td>\n<td><p>Install Python Language and dependencies</p></td>\n<td><p><a href=\"https://github.com/conda-forge/miniforge?tab=readme-ov-file\" class=\"uri\">https://github.com/conda-forge/miniforge?tab=readme-ov-file</a></p></td>\n<td><p>This (mini-forge) installs the base Python programming language, the things it depends on, and many useful packages</p></td>\n</tr>\n<tr>\n<td><p>2:</p></td>\n<td><p>Create an environment</p></td>\n<td><p>Execute the following commands in a terminal: </p>\n<p><code>mamba create -n stats python=3.12 numpy pandas scipy statsmodels scikit-learn lifelines pingouinmatplotlib seaborn plotnine pyreadstatjupyterlab ipykernel jupytext --channel conda-forge</code></p>\n<p><code>conda activate stats</code> </p></td>\n<td><p>This sets up an environment (controls the versions and packages that are used).</p></td>\n</tr>\n<tr>\n<td><p>3:</p></td>\n<td><p>Install Visual Code</p></td>\n<td><p><a href=\"https://code.visualstudio.com/download\">https://code.visualstudio.com/download</a></p></td>\n<td><p>Visual Code is an IDE (integrated development environment) that allows you to write, execute, and debug code from within a single program.</p></td>\n</tr>\n</tbody>\n</table>\n\n\\*Note: there are many <a class='glossary'>IDE<span class='def'>Integrated Development Environment, a program that allows for writing, running, and debugging code within a single program.</span></a>. Visual Code is a classic one with a lot of functionality, though there are AI enabled ones (e.g. Cursor) that may be more helpful depending on how much programming you plan to do and whether you want to bother with the added complexity (discussed more in @sec-llm).\n\nYou can also use Quarto for explainable programming in Python - but Jupyter is a more common workflow so we focus on that.\n\n## Stata\n\n|  |  |  |  |\n|-----------------|-----------------|-----------------|---------------------|\n| 1: | Get a product key | if U of U Trainee, contact me | This verifies you or your institutions' purchase |\n| 2: | Install STATA | <https://www.stata.com/install-guide/> | Includes language and <a class='glossary'>IDE<span class='def'>Integrated Development Environment, a program that allows for writing, running, and debugging code within a single program.</span></a> (integrated development environment) |\n:::\n\n## **Packages** {#sec-packages}\n\nFor common statistical analyses in any of these languages, specialized *packages* already exist that handle these tasks efficiently. Whenever you find yourself manually calculating or coding a statistical procedure, consider that someone likely has already written reliable, tested code that will perform the analysis faster and more accurately. You'll want to use these packages whenever possible.\n\n\n\nFirst, a few terms: <a class='glossary'>function<span class='def'>A reusable piece of code that performs a specific task. Examples include calculating the mean of a dataset or running logistic regression.</span></a>, <a class='glossary'>arguments<span class='def'>Inputs provided to a function so it can perform its task. For instance, a function calculating a mean needs a dataset, while logistic regression requires data, the outcome variable, and predictor variables.</span></a>, <a class='glossary'>package<span class='def'>A curated collection of functions designed to accomplish related tasks. Programming languages come pre-installed with basic packages, but you’ll often download additional packages to access specialized functions. Each language provides straightforward ways to locate and install new packages.</span></a>\n\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> arguments </td>\n   <td style=\"text-align:left;\"> Inputs provided to a function so it can perform its task. For instance, a function calculating a mean needs a dataset, while logistic regression requires data, the outcome variable, and predictor variables. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> function </td>\n   <td style=\"text-align:left;\"> A reusable piece of code that performs a specific task. Examples include calculating the mean of a dataset or running logistic regression. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> package </td>\n   <td style=\"text-align:left;\"> A curated collection of functions designed to accomplish related tasks. Programming languages come pre-installed with basic packages, but you’ll often download additional packages to access specialized functions. Each language provides straightforward ways to locate and install new packages. </td>\n  </tr>\n</tbody>\n</table>\n\n\n\n::: panel-tabset\n## R\n\n|  |  |\n|---------------------------------|---------------------------------------|\n| Where to find packages? | <https://cran.r-project.org/web/views/> |\n| Command to install packages | `install.packages(`\\``package_name`\\``)` |\n| How to access documentation file? | `?package_name` or `?command_name` |\n\n: Package Installation and Documentation in R\n\n## Python\n\n<table style=\"width:96%;\">\n<caption>Package Installation and Documentation in Python</caption>\n<colgroup>\n<col style=\"width: 23%\" />\n<col style=\"width: 71%\" />\n</colgroup>\n<tbody>\n<tr>\n<td><p>Where to find packages?</p></td>\n<td><ol type=\"1\">\n<li><p><a href=\"https://anaconda.org/conda-forge\">https://anaconda.org/conda-forge</a></p></li>\n<li><p><a href=\"https://pypi.org/\">https://pypi.org/</a></p></li>\n<li><p><a href=\"https://github.com/topics/python\">https://github.com/topics/python</a></p></li>\n</ol></td>\n</tr>\n<tr>\n<td><p>Command to install packages</p></td>\n<td><p><code>mamba install package_name</code> (rarely, packages that have not been compiled on conda-forge will require <code>pip install package_name</code> to be used)</p></td>\n</tr>\n<tr>\n<td><p>How to access documentation file?</p></td>\n<td><p>The project page on <a href=\"https://pypi.org/\">https://pypi.org/</a> or <a href=\"https://github.com/\">https://github.com/</a></p></td>\n</tr>\n</tbody>\n</table>\n\n## Stata\n\n|                                   |                            |\n|-----------------------------------|----------------------------|\n| Where to find packages?           | `findit package_name`      |\n| Command to install packages       | `ssc install package_name` |\n| How to access documentation file? | `help package_name`        |\n\n: Package Installation and Documentation in Stata\n:::\n\n## Reproducible Research {#sec-reproducible}\n\nAs mentioned before, explainable programming is an important idea for ensuring that the statistical analyses you do can be double checked, replicated, and improved.\n\nThe idea is that the steps that individually\n\nbasic usage - notebooks - reproducible research pipelines.\n\n## An Example: meta-analyzing the effect of \\*\\*\\* steroids in CAP\n\nThis example is chosen to demonstrate how to make a reproducible notebook, download a package, and execute the relevant commands.\n\nExample - simple meta-analysis in all 3 languages? (all default in STATA?)\n\ninstall the needed packages (meta, excel spreadsheet import)\n\ndisplay the data\n\nmeta-analyze\n\ngenerate a figure.\n\nRelevant packages: <https://cran.r-project.org/web/views/MetaAnalysis.html>\n\nThe 'meta' package looks good. Try using \\`install.packages('meta')\\` to install it, then you can you can access the documentation using \\`?meta\\`\n\nLet's try an example... I extracted data on all of the trials comparing high O2 to low O2 targets and uploaded to github.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(data_sheet)\nauthors <- select(data_sheet, author)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|name       |author   | year|doi                           | num_randomized| num_patients| num_high_o2| high_o2_died| high_o2_alive| num_low_o2| low_o2_died| low_o2_alive|target       |outcome |population   |\n|:----------|:--------|----:|:-----------------------------|--------------:|------------:|-----------:|------------:|-------------:|----------:|-----------:|------------:|:------------|:-------|:------------|\n|Oxygen-ICU |Girardis | 2016|10.1001/jama.2016.11993       |            460|          432|         216|         74.0|         142.0|        216|      52.000|      164.000|either       |in-hosp |All          |\n|CLOSE      |Panwar   | 2016|10.1164/rccm.201505-1019OC    |            104|          103|          51|         19.0|          32.0|         52|      21.000|       31.000|spo2         |90d     |All          |\n|HYPER2S    |Asfar    | 2017|10.1016/S2213-2600(17)30046-2 |            442|          434|         217|        104.0|         113.0|        217|      90.000|      127.000|sao2 vs fio2 |90d     |Septic Shock |\n|Lang2018   |Lang     | 2018|10.1111/aas.13093             |             65|           65|          38|          9.0|          29.0|         27|       8.000|       19.000|fio2         |6m      |TBI          |\n|COMACARE   |Jakkula  | 2018|10.1007/s00134-018-5453-9     |            123|          120|          59|         20.0|          39.0|         61|      18.000|       43.000|pao2         |30d     |OHCA         |\n|ICU-ROX    |Mackle   | 2020|10.1056/NEJMoa1903297         |           1000|          965|         484|        157.3|         326.7|        481|     166.907|      314.093|spo2         |90d     |unknown      |\n\n</div>\n:::\n:::\n\n\nNow, let's meta-analyze it:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(meta)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: metadat\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading 'meta' package (version 8.1-0).\nType 'help(meta)' for a brief overview.\n```\n\n\n:::\n\n```{.r .cell-code}\n#metabin takes events, total (rather than events, nonevents)\nm_ex1 <- meta::metabin(low_o2_died, num_low_o2, high_o2_died, num_high_o2, data = data_sheet, studlab = paste(name, author, year), sm = \"OR\")\nmeta::forest(m_ex1, comb.random = FALSE, lab.c = \"High Oxygen\", lab.e = \"Low Oxygen\", label.left = \"Favors Low O2\", label.right = \"Favors High O2\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Use argument 'label.e' instead of 'lab.e' (deprecated).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Use argument 'label.c' instead of 'lab.c' (deprecated).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](stat_software_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nAnd if you want to get really cutting edge, you can do a trial sequential analysis (TSA) on it:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.2     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.4     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Unknown or uninitialised column: `order`.\nUnknown or uninitialised column: `order`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in RTSA(type = \"analysis\", data = rtsa_df, outcome = \"RR\", mc = 0.9, :\nNB. The required information size adjusted by Diversity (D^2). This might cause\nan under-powered analysis. Consider changing the argument `random_adj` from\n`D2` (default) to `tau2`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study\n[1] \"character\"\n\n$author\n[1] \"character\"\n\n$year\n[1] \"numeric\"\n\n$doi\n[1] \"character\"\n\n$num_randomized\n[1] \"numeric\"\n\n$num_patients\n[1] \"numeric\"\n\n$nI\n[1] \"numeric\"\n\n$eI\n[1] \"numeric\"\n\n$high_o2_alive\n[1] \"numeric\"\n\n$nC\n[1] \"numeric\"\n\n$eC\n[1] \"numeric\"\n\n$low_o2_alive\n[1] \"numeric\"\n\n$target\n[1] \"character\"\n\n$outcome\n[1] \"character\"\n\n$population\n[1] \"character\"\n\n$study\ninteger(0)\n\n$author\ninteger(0)\n\n$year\ninteger(0)\n\n$doi\ninteger(0)\n\n$num_randomized\ninteger(0)\n\n$num_patients\ninteger(0)\n\n$nI\ninteger(0)\n\n$eI\ninteger(0)\n\n$high_o2_alive\ninteger(0)\n\n$nC\ninteger(0)\n\n$eC\ninteger(0)\n\n$low_o2_alive\ninteger(0)\n\n$target\ninteger(0)\n\n$outcome\ninteger(0)\n\n$population\ninteger(0)\n```\n\n\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(an_rtsa)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in geom_segment(aes(x = 0, xend = max(sma_timing, na.rm = T), y = y_val1, : All aesthetics have length 1, but the data has 13 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in geom_segment(aes(x = 0, xend = 0, y = y_val1, yend = y_val2)): All aesthetics have length 1, but the data has 13 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](stat_software_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nMeaning, we've passed futility (at 90% power) for a 10% relative risk reduction a few trials ago. Cool.\n\n## Large Language Models {#sec-llm}\n\n'Vibe Coding' and related concepts. - GPT usage.\n\nword of caution - do not put Patient Health Information into LLM Chatbots. most the services offer to be your data-analyst... which does work, but is not appropriate for research data. This includes \"publically avalilable\" databases like MIMIC\n\n**Large Language Models:** Options:\n\n-   OpenAI Chat GPT (requires subscription for best performance; custom GPTs)\n-   Github CoPilot (programming specific)\n-   Microsoft CoPilot - access to GPT4 = free through University of Utah\n\nCopilot:\n\n-   Visit [bing.com/chat](https://bing.com/chat).\n-   Select \"sign in with a work or school account\" under the Sign in icon in the upper right corner of the page.\n-   Enter your unid\\@umail.utah.edu and uNID password.\n-   Complete Duo two-factor authentication.\n-   The conversation is protected when a green shield appears in the upper right corner next to your username. It is critical to verify that the green shield is present for all conversations.\n\nPrompt Engineering:\n\n1.  have the GPT take the persona that you want\n2.  spell out the chain of thougt that you want the GPT to take (either multiple steps in 1 prompt or several prompts building on one another works)\n3.  Give examples or specifications of what you want done. \\[this is particularly useful because the documents you give it can form a context and examples\\]. \n\nHow I used GPT4 creating this workbook:\n\n![The prompt I used to create the above example.](images/IMG_ADC8B4B4AF1D-1.jpeg){width=\"462\"}\n\nNext steps:\n\nHow should you version control, store, and share statistical analyses? Github is an excellent resource that is relatively straightforward to use, and I strongly recommend it.\n\n## Local Resources {#sec-utah_resources}\n\n-   One Data Science Hub Workshops: <https://utah-data-science-hub.github.io/education_archived.html>  \n-   Request CTSI help: <https://ctsi.utah.edu/cores-and-services/triad> \n-   Intuitive Biostatistics by Harvey Motulsky - <https://a.co/d/4NCk2bS> \n\n## TODO List: {.unnumbered}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# finish examples, and advice about replicable programming. \n# should I move the definitions to a separate glossary section?\n```\n:::\n\n",
    "supporting": [
      "stat_software_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}